cuando agrego un producto desde el local host desde el formulario lo agrega pero en el home cuando quieor mostrar los productos usando el each no me muestra sus datos en la base de datos de mongodb estan bien lass propiedades

import express from "express";
import mongoose from "mongoose";
import { engine } from "express-handlebars";
import { Server } from "socket.io";
import { __dirname } from "./path.js";
import path from "path";

import userRouter from "./routes/users.routes.js";
import productosRouter from "./routes/products.routes.js";
import cartsRouter from "./routes/carrito.routes.js";
import messageRouter from "./routes/messages.routes.js";
import { productModel } from "./models/products.models.js";

const app = express();
const PORT = 8080;

const serverExpress = app.listen(PORT, () => {
  console.log(`Server on port ${PORT}`);
});

//Conexion a la Base de Datos
mongoose
  .connect(
    "mongodb+srv://luisct91:21210ldtc@cluster0.kvfp5k9.mongodb.net/?retryWrites=true&w=majority"
  )
  .then(() => console.log("DB Conectada"))
  .catch(() => console.log("Error en conexion a BDD"));

//MIDDLEWARE
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.engine("handlebars", engine()); //defino el motor de plantillas a usar y la config
app.set("view engine", "handlebars"); //setting de mi app de handlebars
app.set("views", path.resolve(__dirname, "./views")); //rresuelve rutas absolutas a travez de rutas relativas
app.use("/static", express.static(path.join(__dirname, "/public")));

// Server Socket.io

const io = new Server(serverExpress);

io.on("connection", (socket) => {
  console.log("Servidor Socket.io Conectado");

  socket.on("add-message", async ({ email, mensaje }) => {
    console.log(mensaje);
    await messageModel.create({ email: email, message: mensaje });
    const messages = await messageModel.find();
    socket.emit("show-messages", messages);
  });

  socket.on("display-inicial", async () => {
    const messages = await messageModel.find();
    socket.emit("show-messages", messages);
  });

  socket.on("nuevoProductoRealTime", async (product) => {
    try {
      const newProduct = await productModel.create(product);
      io.emit("productoAgregadoRealTime", newProduct);
    } catch (error) {
      console.error("Error al agregar el producto en tiempo real:", error);
    }
  });

  socket.on("solicitarProductos", async () => {
    try {
      const products = await productModel.find(); // Obtener todos los productos de MongoDB
      socket.emit("productosMostrados", products);
    } catch (error) {
      console.error("Error al obtener la lista de productos:", error);
    }
  });
});

//RUTAS
app.use("/api/users", userRouter);
app.use("/api/products", productosRouter);
app.use("/api/carts", cartsRouter);
app.use("api/messages", messageRouter);

// Ruta para la vista home.handlebars
app.get("/static", async (req, res) => {
  try {
    const products = await productModel.find(); // Esto asume que productModel es tu modelo de productos de Mongoose
    res.render("home", {
      css: "style.css",
      title: "Home",
      js: "script.js",
      products: products,
    });
  } catch (error) {
    console.error("Error al obtener los productos:", error);
    res.status(500).send("Error interno del servidor");
  }
});

app.get("/static/realtimeproducts", (req, res) => {
  res.render("realTimeProducts", {
    css: "form.css",
    js: "realTimeProducts.js",
    title: "Productos",
  });
});

import { Schema, model } from "mongoose";

const productSchema = new Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  thumbnails: [],
  status: {
    type: Boolean,
    default: true,
  },
  code: {
    type: String,
    required: true,
    unique: true,
  },
  stock: {
    type: Number,
    required: true,
  },
});

export const productModel = model("products", productSchema);

<h1>Listado de Productos</h1>

<div class="card-container">
  {{#each products}}
    <div class="card">
      <div class="card-title">
        <h1>{{this.title}}</h1>
      </div>
      <div class="card-imagen">
        <h5>{{this.thumbnails}}</h5>
      </div>
      <div class="card-body">
        <div class="card-description">
          {{this.description}}
        </div>
        <div class="card-footer">
          <div class="card-code">
            <h4>Codigo del producto: {{this.code}}</h4>
          </div>
          <div class="card-stock">
            <h4>Stock del producto: {{this.stock}}</h4>
          </div>
          <div class="card-price">
            <h4>Precio del producto: ${{this.price}}</h4>
          </div>
        </div>
      </div>
    </div>

  {{/each}}
</div>